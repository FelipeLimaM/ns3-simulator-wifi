/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */

#include "ns3/core-module.h"
#include "ns3/propagation-module.h"
#include "ns3/network-module.h"
#include "ns3/applications-module.h"
#include "ns3/mobility-module.h"
#include "ns3/internet-module.h"
#include "ns3/flow-monitor-module.h"
#include "ns3/wifi-module.h"

uint32_t countNodes = 10; //GLOBAL

using namespace ns3;

int myRand(){
  //TODO DIOGOOOO Faz isso
  return rand();
}

void funcMobility(bool bmobility, NodeContainer &apnode, NodeContainer &nodes) {
    MobilityHelper mobility;
    if(bmobility){
      //List of points
      Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
      for (size_t i = 0; i < 40; i++) {
        positionAlloc->Add (Vector (myRand()%100, myRand()%100, 0.0));
      }
      //Set list of points
      mobility.SetPositionAllocator (positionAlloc);
      //Set apnode static
      mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
      mobility.Install (apnode);
      //Set nodes with mobility
      Rectangle area = Rectangle (-5000, 5000, -5000, 5000); //Area of mobility
      mobility.SetMobilityModel ("ns3::RandomWalk2dMobilityModel","Bounds", RectangleValue (area));
      mobility.Install (nodes);
    }else{
      //Set local to nodes and apnode
      mobility.SetPositionAllocator ("ns3::GridPositionAllocator",
                                     "MinX", DoubleValue (0.0),
                                     "MinY", DoubleValue (0.0),
                                     "DeltaX", DoubleValue (20.0),
                                     "DeltaY", DoubleValue (20.0),
                                     "GridWidth", UintegerValue (5),
                                     "LayoutType", StringValue ("RowFirst"));
      mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
      mobility.Install (apnode);
      mobility.Install (nodes);
    }
}

void funcIntallWirelessDevice(NodeContainer &apnode, NodeContainer &nodes, NetDeviceContainer &apdevice, NetDeviceContainer &devices){
  // 5. Install wireless devices
  WifiHelper wifi;
  wifi.SetStandard (WIFI_PHY_STANDARD_80211b);
  wifi.SetRemoteStationManager ("ns3::ArfWifiManager");

  YansWifiChannelHelper wifiChannel;
  wifiChannel = YansWifiChannelHelper::Default ();

  YansWifiPhyHelper wifiPhy =  YansWifiPhyHelper::Default ();
  wifiPhy.SetChannel (wifiChannel.Create ());

  Ssid ssid = Ssid ("wifi-default");

  WifiMacHelper wifiMac;
  wifiMac.SetType ("ns3::StaWifiMac","Ssid", SsidValue (ssid));
  devices = wifi.Install (wifiPhy, wifiMac, nodes);
  // setup ap.
  wifiMac.SetType ("ns3::ApWifiMac","Ssid", SsidValue (ssid));
  apdevice = wifi.Install (wifiPhy, wifiMac, apnode);
}

void funcIntallProtocolIP(NodeContainer &apnode, NodeContainer &nodes, NetDeviceContainer &apdevice, NetDeviceContainer &devices, Ipv4InterfaceContainer &apdeviceIP, Ipv4InterfaceContainer &devicesIP){
  // 6. Install TCP/IP stack & assign IP addresses
  InternetStackHelper internet;
  internet.Install (nodes);
  internet.Install (apnode);

  Ipv4AddressHelper ipv4;
  ipv4.SetBase ("198.162.10.0", "255.255.255.0");
  apdeviceIP = ipv4.Assign (apdevice);
  devicesIP = ipv4.Assign (devices);
}

void buildStatistics(FlowMonitorHelper &flowmon, Ptr<FlowMonitor> &monitor){
  // 10. Print per flow statistics
  monitor->CheckForLostPackets();
  Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier> (flowmon.GetClassifier ());
  FlowMonitor::FlowStatsContainer stats = monitor->GetFlowStats ();
  for (std::map<FlowId, FlowMonitor::FlowStats>::const_iterator i = stats.begin (); i != stats.end (); ++i)
    {
      // first 2 FlowIds are for ECHO apps, we don't want to display them
      //
      // Duration for throughput measurement is 9.0 seconds, since
      //   StartTime of the OnOffApplication is at about "second 1"
      // and
      //   Simulator::Stops at "second 10".
      if (i->first > 2)
        {
          Ipv4FlowClassifier::FiveTuple t = classifier->FindFlow (i->first);
          std::cout << "Flow " << i->first - 2 << " (" << t.sourceAddress << " -> " << t.destinationAddress << ")\n";
          std::cout << "  Tx Packets: " << i->second.txPackets << "\n";
          std::cout << "  Tx Bytes:   " << i->second.txBytes << "\n";
          std::cout << "  TxOffered:  " << i->second.txBytes * 8.0 / 9.0 / 1000 / 1000  << " Mbps\n";
          std::cout << "  Rx Packets: " << i->second.rxPackets << "\n";
          std::cout << "  Rx Bytes:   " << i->second.rxBytes << "\n";
          std::cout << "  Throughput: " << i->second.rxBytes * 8.0 / 9.0 / 1000 / 1000  << " Mbps\n";
        }
    }

}

void experiment (bool enableCtsRts)
{
  //------------------------------------------------------------------------------
  //TODO DESCOBRIR O QUE Ã‰ ISSO
    // 0. Enable or disable CTS/RTS
    // Hidden station experiment with RTS/CTS disabled, if enableCtsRts is FALSE
    UintegerValue ctsThr = (enableCtsRts ? UintegerValue (100) : UintegerValue (2200));
    Config::SetDefault ("ns3::WifiRemoteStationManager::RtsCtsThreshold", ctsThr);
  //------------------------------------------------------------------------------


  NodeContainer apnode, nodes;
  NetDeviceContainer apdevice, devices;
  Ipv4InterfaceContainer apdeviceIP, devicesIP;

  //Create nodes
  apnode.Create (1);
  nodes.Create (countNodes);

  funcMobility(true, apnode, nodes);  // if value TRUE, exist mobility, else, not exist mobility.

  funcIntallWirelessDevice(apnode, nodes, apdevice, devices);

  funcIntallProtocolIP(apnode, nodes, apdevice, devices, apdeviceIP, devicesIP);


  // 7. Install applications: two CBR streams each saturating the channel
  ApplicationContainer cbrApps;
  uint16_t cbrPort = 12345;
  // OnOffHelper onOffHelper ("ns3::TcpSocketFactory", InetSocketAddress (Ipv4Address ("10.0.0.2"), cbrPort));
  uint32_t id_server = myRand() % countNodes;
  OnOffHelper onOffHelper ("ns3::TcpSocketFactory", InetSocketAddress (devicesIP.GetAddress(id_server), cbrPort));
  onOffHelper.SetAttribute ("PacketSize", UintegerValue (1400));
  onOffHelper.SetAttribute ("OnTime",  StringValue ("ns3::ConstantRandomVariable[Constant=1]"));
  onOffHelper.SetAttribute ("OffTime", StringValue ("ns3::ConstantRandomVariable[Constant=1]"));

  onOffHelper.SetAttribute ("DataRate", StringValue ("300bps"));
  onOffHelper.SetAttribute ("StartTime", TimeValue (Seconds (1.000000)));
  cbrApps.Add (onOffHelper.Install (nodes.Get (myRand() % countNodes)));

  onOffHelper.SetAttribute ("DataRate", StringValue ("3001bps"));
  onOffHelper.SetAttribute ("StartTime", TimeValue (Seconds (1.001)));
  cbrApps.Add (onOffHelper.Install (nodes.Get (myRand() % countNodes)));




  // Install FlowMonitor on all nodes
  FlowMonitorHelper flowmon;
  Ptr<FlowMonitor> monitor = flowmon.InstallAll ();
  // 9. Run simulation for 10 seconds
  Simulator::Stop (Seconds (10));
  Simulator::Run ();
  //execute magic of the flowmon
  buildStatistics(flowmon, monitor);
  // 11. Cleanup
  Simulator::Destroy ();
}

int main (int argc, char **argv)
{
  CommandLine cmd;

  cmd.AddValue("nodes", "Number of packets to echo", countNodes);
  cmd.Parse (argc, argv);

  experiment (false);

  return 0;
}





// /* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
//
// //
// // This script configures two nodes on an 802.11b physical layer, with
// // 802.11b NICs in infrastructure mode, and by default, the station sends
// // one packet of 1000 (application) bytes to the access point.  The
// // physical layer is configured
// // to receive at a fixed RSS (regardless of the distance and transmit
// // power); therefore, changing position of the nodes has no effect.
// //
// // There are a number of command-line options available to control
// // the default behavior.  The list of available command-line options
// // can be listed with the following command:
// // ./waf --run "wifi-simple-infra --help"
// //
// // For instance, for this configuration, the physical layer will
// // stop successfully receiving packets when rss drops below -97 dBm.
// // To see this effect, try running:
// //
// // ./waf --run "wifi-simple-infra --rss=-97 --numPackets=20"
// // ./waf --run "wifi-simple-infra --rss=-98 --numPackets=20"
// // ./waf --run "wifi-simple-infra --rss=-99 --numPackets=20"
// //
// // Note that all ns-3 attributes (not just the ones exposed in the below
// // script) can be changed at command line; see the documentation.
// //
// // This script can also be helpful to put the Wifi layer into verbose
// // logging mode; this command will turn on all wifi logging:
// //
// // ./waf --run "wifi-simple-infra --verbose=1"
// //
// // When you are done, you will notice two pcap trace files in your directory.
// // If you have tcpdump installed, you can try this:
// //
// // tcpdump -r wifi-simple-infra-0-0.pcap -nn -tt
// //
//
// #include "ns3/core-module.h"
// #include "ns3/network-module.h"
// #include "ns3/mobility-module.h"
// #include "ns3/config-store-module.h"
// #include "ns3/wifi-module.h"
// #include "ns3/internet-module.h"
//
// #include <iostream>
// #include <fstream>
// #include <vector>
// #include <string>
//
// using namespace ns3;
//
// NS_LOG_COMPONENT_DEFINE ("WifiSimpleInfra");
//
// void ReceivePacket (Ptr<Socket> socket)
// {
//   while (socket->Recv ())
//     {
//       NS_LOG_UNCOND ("Received one packet!");
//     }
// }
//
// static void GenerateTraffic (Ptr<Socket> socket, uint32_t pktSize,
//                              uint32_t pktCount, Time pktInterval )
// {
//   if (pktCount > 0)
//     {
//       socket->Send (Create<Packet> (pktSize));
//       Simulator::Schedule (pktInterval, &GenerateTraffic,
//                            socket, pktSize,pktCount-1, pktInterval);
//     }
//   else
//     {
//       socket->Close ();
//     }
// }
//
//
// int main (int argc, char *argv[])
// {
//   std::string phyMode ("DsssRate1Mbps");
//   double rss = -80;  // -dBm
//   uint32_t packetSize = 1000; // bytes
//   uint32_t numPackets = 1;
//   double interval = 1.0; // seconds
//   bool verbose = false;
//
//   CommandLine cmd;
//
//   cmd.AddValue ("phyMode", "Wifi Phy mode", phyMode);
//   cmd.AddValue ("rss", "received signal strength", rss);
//   cmd.AddValue ("packetSize", "size of application packet sent", packetSize);
//   cmd.AddValue ("numPackets", "number of packets generated", numPackets);
//   cmd.AddValue ("interval", "interval (seconds) between packets", interval);
//   cmd.AddValue ("verbose", "turn on all WifiNetDevice log components", verbose);
//
//   cmd.Parse (argc, argv);
//   // Convert to time object
//   Time interPacketInterval = Seconds (interval);
//
//   // disable fragmentation for frames below 2200 bytes
//   Config::SetDefault ("ns3::WifiRemoteStationManager::FragmentationThreshold", StringValue ("2200"));
//   // turn off RTS/CTS for frames below 2200 bytes
//   Config::SetDefault ("ns3::WifiRemoteStationManager::RtsCtsThreshold", StringValue ("2200"));
//   // Fix non-unicast data rate to be the same as that of unicast
//   Config::SetDefault ("ns3::WifiRemoteStationManager::NonUnicastMode",
//                       StringValue (phyMode));
//
//   NodeContainer c;
//   c.Create (2);
//
//   // The below set of helpers will help us to put together the wifi NICs we want
//   WifiHelper wifi;
//   if (verbose)
//     {
//       wifi.EnableLogComponents ();  // Turn on all Wifi logging
//     }
//   wifi.SetStandard (WIFI_PHY_STANDARD_80211b);
//
//   YansWifiPhyHelper wifiPhy =  YansWifiPhyHelper::Default ();
//   // This is one parameter that matters when using FixedRssLossModel
//   // set it to zero; otherwise, gain will be added
//   wifiPhy.Set ("RxGain", DoubleValue (0) );
//   // ns-3 supports RadioTap and Prism tracing extensions for 802.11b
//   wifiPhy.SetPcapDataLinkType (YansWifiPhyHelper::DLT_IEEE802_11_RADIO);
//
//   YansWifiChannelHelper wifiChannel;
//   wifiChannel.SetPropagationDelay ("ns3::ConstantSpeedPropagationDelayModel");
//   // The below FixedRssLossModel will cause the rss to be fixed regardless
//   // of the distance between the two stations, and the transmit power
//   wifiChannel.AddPropagationLoss ("ns3::FixedRssLossModel","Rss",DoubleValue (rss));
//   wifiPhy.SetChannel (wifiChannel.Create ());
//
//   // Add a mac and disable rate control
//   WifiMacHelper wifiMac;
//   wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager",
//                                 "DataMode",StringValue (phyMode),
//                                 "ControlMode",StringValue (phyMode));
//
//   // Setup the rest of the mac
//   Ssid ssid = Ssid ("wifi-default");
//   // setup sta.
//   wifiMac.SetType ("ns3::StaWifiMac",
//                    "Ssid", SsidValue (ssid));
//   NetDeviceContainer staDevice = wifi.Install (wifiPhy, wifiMac, c.Get (0));
//   NetDeviceContainer devices = staDevice;
//   // setup ap.
//   wifiMac.SetType ("ns3::ApWifiMac",
//                    "Ssid", SsidValue (ssid));
//   NetDeviceContainer apDevice = wifi.Install (wifiPhy, wifiMac, c.Get (1));
//   devices.Add (apDevice);
//
//   // Note that with FixedRssLossModel, the positions below are not
//   // used for received signal strength.
//   MobilityHelper mobility;
//   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
//   positionAlloc->Add (Vector (0.0, 0.0, 0.0));
//   positionAlloc->Add (Vector (50.0, 0.0, 0.0));
//   mobility.SetPositionAllocator (positionAlloc);
//   mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
//   mobility.Install (c);
//
//   InternetStackHelper internet;
//   internet.Install (c);
//
//   Ipv4AddressHelper ipv4;
//   NS_LOG_INFO ("Assign IP Addresses.");
//   ipv4.SetBase ("10.1.1.0", "255.255.255.0");
//   Ipv4InterfaceContainer i = ipv4.Assign (devices);
//
//   TypeId tid = TypeId::LookupByName ("ns3::UdpSocketFactory");
//   Ptr<Socket> recvSink = Socket::CreateSocket (c.Get (0), tid);
//   InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (), 80);
//   recvSink->Bind (local);
//   recvSink->SetRecvCallback (MakeCallback (&ReceivePacket));
//
//   Ptr<Socket> source = Socket::CreateSocket (c.Get (1), tid);
//   InetSocketAddress remote = InetSocketAddress (Ipv4Address ("255.255.255.255"), 80);
//   source->SetAllowBroadcast (true);
//   source->Connect (remote);
//
//   // Tracing
//   wifiPhy.EnablePcap ("wifi-simple-infra", devices);
//
//   // Output what we are doing
//   NS_LOG_UNCOND ("Testing " << numPackets  << " packets sent with receiver rss " << rss );
//
//   Simulator::ScheduleWithContext (source->GetNode ()->GetId (),
//                                   Seconds (1.0), &GenerateTraffic,
//                                   source, packetSize, numPackets, interPacketInterval);
//
//   Simulator::Stop (Seconds (30.0));
//   Simulator::Run ();
//   Simulator::Destroy ();
//
//   return 0;
// }
